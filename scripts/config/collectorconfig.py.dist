import stat
import re

import socorro.lib.ConfigurationManager as cm

# Storage constants

from config.commonconfig import crashStorageClass

from config.commonconfig import jsonFileSuffix
from config.commonconfig import dumpFileSuffix

#---------------------------------------------------------------------------
# HBase storage system
if crashStorageClass.default == 'CrashStorageSystemForHBase':
  from config.commonconfig import hbaseHost
  from config.commonconfig import hbasePort
  from config.commonconfig import hbaseTimeout

  hbaseFallbackFS = cm.Option()
  hbaseFallbackFS.doc = 'a path to a local file system to use if hbase fails'
  hbaseFallbackFS.default = './'

  hbaseFallbackDumpDirCount = cm.Option()
  hbaseFallbackDumpDirCount.doc = 'the number of dumps to be stored in a single directory in the hbaseFallback File System'
  hbaseFallbackDumpDirCount.default = 1024

  hbaseFallbackDumpGID = cm.Option()
  hbaseFallbackDumpGID.doc="the group ID for saved crashes in hbaseFallback File System (optional)"
  hbaseFallbackDumpGID.default = None

  hbaseFallbackDumpPermissions = cm.Option()
  hbaseFallbackDumpPermissions.doc = "a number used for permissions crash dump files in the hbaseFallback File System"
  hbaseFallbackDumpPermissions.default = stat.S_IRGRP | stat.S_IWGRP | stat.S_IRUSR | stat.S_IWUSR

  hbaseFallbackDirPermissions = cm.Option()
  hbaseFallbackDirPermissions.doc = "a number used for permissions for directories in the hbaseFallback File System"
  hbaseFallbackDirPermissions = stat.S_IRGRP | stat.S_IXGRP | stat.S_IWGRP | stat.S_IRUSR | stat.S_IXUSR | stat.S_IWUSR

  # the percentage of submissions should be passed on to hbase
  hbaseSubmissionRate = cm.Option()
  hbaseSubmissionRate.default = 100

  #alternative backup crash storage
  useBackupNFSStorage = cm.Option()
  useBackupNFSStorage.default = True

  if useBackupNFSStorage.default == True:
    storageRoot = cm.Option()
    storageRoot.doc = 'the root of the file system where dumps are found'
    storageRoot.default = '/tmp/socorro/toBeProcessed/'

    deferredStorageRoot = cm.Option()
    deferredStorageRoot.doc = 'the root of the file system where dumps are found'
    deferredStorageRoot.default = '/tmp/socorro/toBeDeferred/'

    dumpDirPrefix = cm.Option()
    dumpDirPrefix.doc = 'dump directory names begin with this prefix'
    dumpDirPrefix.default = 'bp_'

    dumpDirCount = cm.Option()
    dumpDirCount.doc = 'the number of dumps to be stored in a single directory'
    dumpDirCount.default = 1024

    dumpGID = cm.Option()
    dumpGID.doc="the group ID on minidumps so that they can be deleted by other users (optional)"
    dumpGID.default = None

    dumpPermissions = cm.Option()
    dumpPermissions.doc = 'when saving dumps, the pemission flags to be used'
    dumpPermissions.default = '%d'%(stat.S_IRGRP | stat.S_IWGRP | stat.S_IRUSR | stat.S_IWUSR)

    dirPermissions = cm.Option()
    dirPermissions.doc = 'when saving dumps, the permission flags to be used on directories'
    dirPermissions.default = '%d'%(stat.S_IRGRP | stat.S_IXGRP | stat.S_IWGRP | stat.S_IRUSR | stat.S_IXUSR | stat.S_IWUSR)

#---------------------------------------------------------------------------
# NFS storage system
if crashStorageClass.default == 'CrashStorageSystemForNFS':
  from config.commonconfig import storageRoot
  from config.commonconfig import deferredStorageRoot
  from config.commonconfig import processedDumpStoragePath
  from config.commonconfig import dumpDirPrefix
  from config.commonconfig import dumpDirCount
  from config.commonconfig import dumpGID
  from config.commonconfig import dumpPermissions
  from config.commonconfig import dirPermissions


# The form field the client sends the dump in
dumpField = cm.Option()
dumpField.default = "upload_file_minidump"

# when storing in the file system, how deep should the radix directory depth be
storageDepth = cm.Option()
storageDepth.default = 2

# Returned to the client with a uuid following
dumpIDPrefix = cm.Option()
dumpIDPrefix.default = "bp-"

# Bugzilla 495700 - need to be able to ignore new Thottleable protocol
neverDiscard = cm.Option()
neverDiscard.default = True
neverDiscard.fromStringConverter = cm.booleanConverter

throttleConditions = cm.Option()
throttleConditions.default = [
  ("Version", lambda x: x[-3:] == "pre" or x[3] in 'ab', 100.0), # queue 100% of crashes with version ending in "pre" or having 'a' or 'b'
  #("Add-ons", re.compile('inspector\@mozilla\.org\:1\..*'), 75.0), # queue 75% of crashes where the inspector addon is at 1.x
  #("UserID", "d6d2b6b0-c9e0-4646-8627-0b1bdd4a92bb", 100.0), # queue all of this user's crashes
  #("SecondsSinceLastCrash", lambda x: 300 >= int(x) >= 0, 100.0), # queue all crashes that happened within 5 minutes of another crash
  (None, True, 10.0) # queue 10% of what's left
]

minimalVersionForUnderstandingRefusal = cm.Option()
minimalVersionForUnderstandingRefusal.default = { 'Firefox': '3.5.4' }

benchmark = cm.Option()
benchmark.default = False
benchmark.fromStringConverter = cm.booleanConverter

logFilePathname = cm.Option()
logFilePathname.doc = 'full pathname for the log file'
logFilePathname.default = './collector.log'

logFileMaximumSize = cm.Option()
logFileMaximumSize.doc = 'maximum size in bytes of the log file'
logFileMaximumSize.default = 1000000

logFileMaximumBackupHistory = cm.Option()
logFileMaximumBackupHistory.doc = 'maximum number of log files to keep'
logFileMaximumBackupHistory.default = 50

logFileLineFormatString = cm.Option()
logFileLineFormatString.doc = 'python logging system format for log file entries'
logFileLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

logFileErrorLoggingLevel = cm.Option()
logFileErrorLoggingLevel.doc = 'logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
logFileErrorLoggingLevel.default = 10


