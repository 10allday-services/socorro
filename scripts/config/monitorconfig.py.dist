import socorro.lib.ConfigurationManager as cm
import datetime
import stat

#---------------------------------------------------------------------------
# imported config

from config.commonconfig import databaseHost
from config.commonconfig import databaseName
from config.commonconfig import databaseUserName
from config.commonconfig import databasePassword
from config.commonconfig import processorCheckInTime
from config.commonconfig import crashStorageClass

#---------------------------------------------------------------------------
# HBase storage system
if crashStorageClass.default == 'CrashStorageSystemForHBase':
  from config.commonconfig import hbaseHost
  from config.commonconfig import hbasePort
  from config.commonconfig import hbaseFallbackFS
  from config.commonconfig import hbaseFallbackDumpDirCount
  from config.commonconfig import hbaseFallbackDumpGID
  from config.commonconfig import hbaseFallbackDumpPermissions
  from config.commonconfig import hbaseFallbackDirPermissions

#---------------------------------------------------------------------------
# NFS storage system
if crashStorageClass.default == 'CrashStorageSystemForNFS':
  from config.commonconfig import storageRoot
  from config.commonconfig import deferredStorageRoot
  from config.commonconfig import jsonFileSuffix
  from config.commonconfig import dumpFileSuffix
  from config.commonconfig import dumpDirPrefix
  from config.commonconfig import dumpPermissions
  from config.commonconfig import dirPermissions
  from config.commonconfig import dumpGID

  saveSuccessfulMinidumpsTo = cm.Option()
  saveSuccessfulMinidumpsTo.doc = 'the location for saving successfully processed dumps (leave blank to delete them instead)'
  saveSuccessfulMinidumpsTo.default = '/tmp/s1/suc'

  saveFailedMinidumpsTo = cm.Option()
  saveFailedMinidumpsTo.doc = 'the location for saving dumps that failed processing (leave blank to delete them instead)'
  saveSuccessfulMinidumpsTo.default = '/tmp/socorro-failed'

#---------------------------------------------------------------------------
# monitor local config

standardLoopDelay = cm.Option()
standardLoopDelay.doc = 'the time between scans for jobs (HHH:MM:SS)'
standardLoopDelay.default = '00:05:00'
standardLoopDelay.fromStringConverter = cm.timeDeltaConverter

cleanupJobsLoopDelay = cm.Option()
cleanupJobsLoopDelay.doc = 'the time between runs of the job clean up routines (HHH:MM:SS)'
cleanupJobsLoopDelay.default = '00:05:00'
cleanupJobsLoopDelay.fromStringConverter = cm.timeDeltaConverter

priorityLoopDelay = cm.Option()
priorityLoopDelay.doc = 'the time between checks for priority jobs (HHH:MM:SS)'
priorityLoopDelay.default = '00:01:00'
priorityLoopDelay.fromStringConverter = cm.timeDeltaConverter

#---------------------------------------------------------------------------
# Logging Config Section

logFilePathname = cm.Option()
logFilePathname.doc = 'full pathname for the log file'
logFilePathname.default = './monitor.log'

logFileMaximumSize = cm.Option()
logFileMaximumSize.doc = 'maximum size in bytes of the log file'
logFileMaximumSize.default = 1000000

logFileMaximumBackupHistory = cm.Option()
logFileMaximumBackupHistory.doc = 'maximum number of log files to keep'
logFileMaximumBackupHistory.default = 50

logFileLineFormatString = cm.Option()
logFileLineFormatString.doc = 'python logging system format for log file entries'
logFileLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

logFileErrorLoggingLevel = cm.Option()
logFileErrorLoggingLevel.doc = 'logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
logFileErrorLoggingLevel.default = 10

stderrLineFormatString = cm.Option()
stderrLineFormatString.doc = 'python logging system format for logging to stderr'
stderrLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

stderrErrorLoggingLevel = cm.Option()
stderrErrorLoggingLevel.doc = 'logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
stderrErrorLoggingLevel.default = 40


