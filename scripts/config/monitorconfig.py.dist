import socorro.lib.ConfigurationManager as cm
import datetime

try:
  from commonconfig import *
except ImportError:
  from config.commonconfig import *

dumpDirDelta = cm.Option()
dumpDirDelta.doc = 'the age when an empty dump directory can be deleted (HHH:MM:SS)'
dumpDirDelta.default =  '2:00:00'
dumpDirDelta.fromStringConverter = cm.timeDeltaConverter

dateDirDelta = cm.Option()
dateDirDelta.doc = 'the age when an empty date directory can be deleted (HHH:MM:SS)'
dateDirDelta.default = '1:00:00'
dateDirDelta.fromStringConverter = cm.timeDeltaConverter

minimumSymlinkAge = cm.Option()
minimumSymlinkAge.doc = 'the age that a simlink must be before it is processed (HHH:MM:SS)'
minimumSymlinkAge.default = '0:00:30'
minimumSymlinkAge.fromStringConverter = cm.timeDeltaConverter

standardLoopDelay = cm.Option()
standardLoopDelay.doc = 'the time between scans for jobs (HHH:MM:SS)'
standardLoopDelay.default = '00:05:00'
standardLoopDelay.fromStringConverter = cm.timeDeltaConverter

cleanupDirectoryLoopDelay = cm.Option()
cleanupDirectoryLoopDelay.doc = 'the time between runs of the clean up routines (HHH:MM:SS)'
cleanupDirectoryLoopDelay.default = '4:00:00'
cleanupDirectoryLoopDelay.fromStringConverter = cm.timeDeltaConverter

cleanupJobsLoopDelay = cm.Option()
cleanupJobsLoopDelay.doc = 'the time between runs of the job clean up routines (HHH:MM:SS)'
cleanupJobsLoopDelay.default = '00:05:00'
cleanupJobsLoopDelay.fromStringConverter = cm.timeDeltaConverter

priorityLoopDelay = cm.Option()
priorityLoopDelay.doc = 'the time between checks for priority jobs (HHH:MM:SS)'
priorityLoopDelay.default = '00:01:00'
priorityLoopDelay.fromStringConverter = cm.timeDeltaConverter

saveMinidumpsTo = cm.Option()
saveMinidumpsTo.doc = 'the location for saving dumps'
saveMinidumpsTo.default = '/tmp/socorro-saved'

saveFailedMinidumps = cm.Option()
saveFailedMinidumps.doc = 'save the dump files that failed processing'
saveFailedMinidumps.default = False
saveFailedMinidumps.fromStringConverter = cm.booleanConverter

saveProcessedMinidumps = cm.Option()
saveProcessedMinidumps.doc = 'save the successfully processed dump files'
saveProcessedMinidumps.default = False
saveProcessedMinidumps.fromStringConverter = cm.booleanConverter

debug = cm.Option()
debug.doc = 'do debug output and routines'
debug.default = False
debug.singleCharacter = 'D'
debug.fromStringConverter = cm.booleanConverter

logFilePathname = cm.Option()
logFilePathname.doc = 'full pathname for the log file'
logFilePathname.default = './monitor.log'

logFileMaximumSize = cm.Option()
logFileMaximumSize.doc = 'maximum size in bytes of the log file'
logFileMaximumSize.default = 1000000

logFileMaximumBackupHistory = cm.Option()
logFileMaximumBackupHistory.doc = 'maximum number of log files to keep'
logFileMaximumBackupHistory.default = 50

logFileLineFormatString = cm.Option()
logFileLineFormatString.doc = 'python logging system format for log file entries'
logFileLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

logFileErrorLoggingLevel = cm.Option()
logFileErrorLoggingLevel.doc = 'logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
logFileErrorLoggingLevel.default = 10

stderrLineFormatString = cm.Option()
stderrLineFormatString.doc = 'python logging system format for logging to stderr'
stderrLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

stderrErrorLoggingLevel = cm.Option()
stderrErrorLoggingLevel.doc = 'logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
stderrErrorLoggingLevel.default = 40


