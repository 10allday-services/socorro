import socorro.lib.ConfigurationManager as cm
import datetime

databaseDSN = cm.Option()
databaseDSN.doc = 'the string used to connect to the database'
databaseDSN.default = 'host=hostname dbname=databasename user=username password=password'

storageRoot = cm.Option()
storageRoot.doc = 'the root of the file system where dumps are found'
storageRoot.default = '/tmp/socorro/'

dumpDirPrefix = cm.Option()
dumpDirPrefix.doc = 'dump directory names begin with this prefix'
dumpDirPrefix.default = 'bp_'

jsonFileSuffix = cm.Option()
jsonFileSuffix.doc = 'the suffix used to identify a json file'
jsonFileSuffix.default = '.json'

dumpFileSuffix = cm.Option()
dumpFileSuffix.doc = 'the suffix used to identify a dump file'
dumpFileSuffix.default = '.dump'

dumpDirDelta = cm.Option()
dumpDirDelta.doc = 'the age when an empty dump directory can be deleted (HHH:MM:SS)'
dumpDirDelta.default =  datetime.timedelta(hours=2)
dumpDirDelta.fromStringConverter = cm.timeDeltaConverter

dateDirDelta = cm.Option()
dateDirDelta.doc = 'the age when an empty date directory can be deleted (HHH:MM:SS)'
dateDirDelta.default = datetime.timedelta(hours=1)
dateDirDelta.fromStringConverter = cm.timeDeltaConverter

processorCheckInTime = cm.Option()
processorCheckInTime.doc = 'the time after which a processor is considered dead (in the form of an SQL interval)'
processorCheckInTime.default = '5 minutes'

standardLoopDelay = cm.Option()
standardLoopDelay.doc = 'the delay in seconds between filesystem walks looking for jobs'
standardLoopDelay.default = 300

cleanupLoopDelay = cm.Option()
cleanupLoopDelay.doc = 'the delay in seconds between checks for priority jobs'
cleanupLoopDelay.default = 60 * 60 * 4  # 4hrs * 60min * 60sec

priorityLoopDelay = cm.Option()
priorityLoopDelay.doc = 'the delay in seconds between checks for priority jobs'
priorityLoopDelay.default = 5

saveMinidumpsTo = cm.Option()
saveMinidumpsTo.doc = 'the location for saving dumps'
saveMinidumpsTo.default = '/tmp/socorro-saved'

saveFailedMinidumps = cm.Option()
saveFailedMinidumps.doc = 'save the dump files that failed processing'
saveFailedMinidumps.default = False
saveFailedMinidumps.fromStringConverter = cm.booleanConverter

saveProcessedMinidumps = cm.Option()
saveProcessedMinidumps.doc = 'save the successfully processed dump files'
saveProcessedMinidumps.default = False
saveProcessedMinidumps.fromStringConverter = cm.booleanConverter

fileSystemDateThreshold = cm.Option()
fileSystemDateThreshold.doc = 'preload the date at which to start the file system scan ("YYYY/MM/DD/HH")'
fileSystemDateThreshold.default = "2008/07/01/00"

debug = cm.Option()
debug.doc = 'do debug output and routines'
debug.default = False
debug.singleCharacter = 'D'
debug.fromStringConverter = cm.booleanConverter

logFilePathname = cm.Option()
logFilePathname.doc = 'full pathname for the log file'
logFilePathname.default = './monitor.log'

logFileMaximumSize = cm.Option()
logFileMaximumSize.doc = 'maximum size in bytes of the log file'
logFileMaximumSize.default = 1000000

logFileMaximumBackupHistory = cm.Option()
logFileMaximumBackupHistory.doc = 'maximum number of log files to keep'
logFileMaximumBackupHistory.default = 50

logFileLineFormatString = cm.Option()
logFileLineFormatString.doc = 'python logging system format for log file entries'
logFileLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

logFileErrorLoggingLevel = cm.Option()
logFileErrorLoggingLevel.doc = 'logging level for the log file (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
logFileErrorLoggingLevel.default = 10

stderrLineFormatString = cm.Option()
stderrLineFormatString.doc = 'python logging system format for logging to stderr'
stderrLineFormatString.default = '%(asctime)s %(levelname)s - %(message)s'

stderrErrorLoggingLevel = cm.Option()
stderrErrorLoggingLevel.doc = 'logging level for the logging to stderr (10 - DEBUG, 20 - INFO, 30 - WARNING, 40 - ERROR, 50 - CRITICAL)'
stderrErrorLoggingLevel.default = 40


